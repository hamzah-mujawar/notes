* Hannibal at the Gates: Cyberwarfare & the Solarwinds Sunburst Hack | Pratim Datta | JITTC [cite:@HannibalGatesCyberwarfare]
[2025-07-08 Tue 18:09]
** Raw Notes
- SolarWinds was not just a cyberattack but a state-sponsored cyberwarfare operation exploiting
  systemic vulnerabilities exposed by COVID-19 digitisation.
*** Datta's Arguments:
- *Organisational Failure > Technical Flaws*
  - Datta argues that cybersecurity operational mindset needs to shift from technical solutions to
    re-engineering the organisational processes and cultures to stay ahead of state-sponsored APTs.
  - He compares the Sunburst hack to Hannibal's victory to a more sophisticated Roman army in the
    battle of Cannae [cite:@samuelsRealityCannae1990], where a state-actor can cripple a larger foe by leveraging existing SOPs
    (Standard Operating Procedures). He also points out the reactive rather than proactive operational
    cultures of "don't fix unless broken" "wait, watch, react" ideology.
- *How SOPs (Standard Operating Procedures) are utilised by state-sponsored adversaries*
  - Datta provides an example of how a state-sponsored adversary can exploit SOPs of how GRU, which
    is Russia's espionage group, who are rumoured to have collaborated with Fancy Bear (APT28), which
    is an infamous Russian hacker unit, to sabotage Ukrainian artillery positions and destroy corresponding
    artillery [cite:@volzRussianHackersTracked2016].
    - Fancy Bear used a combination of remote-access command and control (C2) and Beacon malware
      to compromise Ukrainian artillery. The Ukrainian military had an arsenal of 122mm D-30 towed
      howitzers. Yaroslav Sherstuk, a Ukrainian artillery officer, had developed a program called
      “Попр-Д30.apk” (apk stands for Android Application Package meant for Android operating systems).
      The APK originally could process targeting data faster and reduce the D-30 howitzer's targeting time
      from few minutes to 15s.
    - Using the “Попр-Д30.apk” as a template, Fancy Bear developed X-agent.
      - X-agent was a malware implant that used a remote access C2 structure with RC4 cryptographic
	variant and a 50-base key. Fancy Bear distributed the malware APK variant via social media
	and military forums.
      - Between 2014 and 2016, the Ukrainian armed forces downloaded the malware “Попр-Д30.apk”. The
	APK carried a C2 Beacon, a malicious payload that would remotely communicate with the malware
	command and control from an infected Android device being used in the field.
    - The malware infected devices remotely communicating to Fancy Bear's remote servers compromised
      the D-30 artillery locations, the battery strength, and movements, allowing Russian strikes
      on Ukrainian artillery, resulting in 20% D-30 howitzers lost in combat.
  - Fancy Bear's success with remote access malware and a Beacon payload became a template that alleged
    state-sponsored actors that was followed in the Sunburst trojanised malware cyberhack.    
- *The Sunburst [Solorigate] UNC2452 cyberattack*
  - The Sunburst hack is a case-in-point of leveraging routine processes in the software supply chain
    to adversely compromise multiple targets [cite:@SolarWindsSupplyChain].
*** Datta's Analysis of SolarWinds
- The SolarWinds Orion business software updates were trojanised to distribute malware called SUNBURST, this was discovered by FireEye [cite:@SolarWindsSupplyChain].
- Datta classifies the SolarWinds attack as not just a cyberattack but a cyberwarfare campaign. He classifies this as such as it was operating on many fronts and over a sustained period of time
  rather than just a single incident. Datta goes on to say that SolarWinds didn't use a shock-and-awe attack like a Denial of Service (DoS), but instead capitalised on routines, sub-optimal processes,
  to be passively pulled by SolarWinds Orion client systems, remain dormant, sniff, and activate on proper target discovery, and then disguise and move laterally across the system.
- Datta breaks the attack into 6 stages: Choosing the attack vector, Increasing the attack surface,
  Building an attack infrastructure, Reconnoitring the flanks, Sabotaging and evading,
  Controlling and communicating.
**** Choosing the attack vector
- Datta defines an attack vector as: The mechanism by which cyber-threats find their way into a
  network or system.
- Datta says that the perpetrators behind the SolarWinds attack may have found GitHub to be a
  fertile ground for capitalising on misconfigured code release. Datta suggests that the perpetrators
  must have used the misconfigured public code release along with SolarWinds insecure update server
  credentials to inject malicious code into a component .dll and packaged it in a regular pull-
  or push-based patch update.
- Datta also goes on to say that the perpetrators realised serious misconfiguration and password
  vulnerabilities. In November 2019, Kumar, a cybersecurity researcher, warned that SolarWinds update
  server (where new software and security updates are posted) was accessible using a non-secure
  password "solarwinds123". And that it took SolarWinds 3 weeks to update the server password.
**** Increasing the attack surface
- Datta defines attack surface as the amount and area that a cyber-threat can damage via an attack.
- Organisations need to reduce their attack surface to the minimal while cyber-threats seek to
  increase the attack surface to the maximum.
- Datta states SolarWinds Orion infrastructure monitoring software as a popular third-party cybersecurity
  and infrastructure monitoring software vendor to multiple organisation and industry verticals
  around the world, especially common across multiple US government agencies, including the
  Department of Defence.
- Datta goes on to say that the choice of attack surface was predicated by two important assumptions.
  1) SolarWinds Orion infrastructure monitoring software had multiple client organisations, from
     government to companies, thus making Solarwinds a valuable common denominator for a hacking
     gateway into multiple organisations.
  2) Solarwinds Orion infrastructure monitoring and management software advised clients to exclude its
     software from anti-virus and EDR (End-Point Detection and Response) monitoring in order to reduce
     Type I errors (false positives from detecting routine activities as threats). This allowed
     allowed for perpetrators to infiltrate the Orion gateway itself with the Sunburst hack,
     dramatically increasing the attack surface with multiple lines of access, communication, and
     control.
**** Building an attack infrastructure
- Around, March-May 2020, the perpetrators set up an entire valid digital signature and encryption
  infrastructure to spoof authentication of their malware and make it look official, certified,
  and legitimate.
- Using digital signatures, the perpetrators targeted computers running Microsoft Windows, creating
  multiple trojanised, Digitally Signed, innocuous-looking compressed components within the Windows
  Installer Patch files as a Solarwinds Orion software plug-in.
- The plug-in update file contained a trojanised malware compressed DLL (dynamic link library) component
  file called /SolarWinds.Orion.Core.BusinessLayer.dll/, is cleverly hidden within a "msp" (Microsoft patch),
  and is posted on the Solarwinds update website.
**** Reconnoitring the flanks
- Several client organisations and industry verticals that regularly visited the SolarWinds update
  website unknowingly start installing the malicious hiding within a legitimate /SolarWinds.BusinessLayerHost.exe/
  (a Microsoft Windows executable file).
- The trojanised malware Sunburst remained dormant for 2 weeks and hid in plain sight to not raise
  any eyebrows from an out-of-the-ordinary "flaggable" surge in network traffic communications.
- After a 2-week dormancy, the malware activated and started a multi-stage process:
  - Sunburst began by running a service in the background computer memory called Teardrop.
  - Teardrop starts a new process thread (e.g. /netsetupsvc.dll) utilising a file called /gracious_truth.jpg/
    (masquerading as an image file).
  - The Teardrop service deploys a malicious payload called Cobalt Strike's Beacon malware. Beacon
    uses popular HTTP, HTTPS, or DNS to hide as legitimate traffic while executing remote commands.
**** Sabotaging and evading
1) The malware uses a DGA (Domain Generation Algorithm) to establish a C2 server by resolving a subdomain
   of avsvmcloud [..].com, creating multiple fully qualified but malicious domain names such as
   xyz.appsync-api[.]eu-west-1[.]avsvmcloud[.]com
   - This opened a communication backdoor.
2) With multiple malicious domains generated along with a command-and-control structure,
   the DNS entries became formal list of phonebook entries for safe communication, which made remote
   access by the perpetrators quite easy.
3) With foresight, the perpetrators even mimicked legitimate hostnames on their C2 servers to avoid
   suspicions and detection and camouflage themselves.
   - Sunburst operated like spies, moving laterally and constantly changing positions and credentials
     within the network. Sunburst also ensured that the credentials used for laterally moving within
     the network did not match the credentials used for remote access. Much like a spy that changes
     names, places, and codenames.
4) Sunburst started communicating with the malicious Command and Control domains.
   - Sunburst communicates as an API (Application Programming Interface) communications.
   - An API is an interface that links between multiple programs via certain protocols to share
     and translate information across many different types of software and architectures.
5) No cybersecurity flags were raised because Sunburst communications are cleverly disguised to mimic
   normal Solarwinds API communications from various Solarwinds clients to the enterprise.
**** Controlling and communicating
- Sunburst ran a remotely controlled Job Execution Engine that can use the Beacon malware along with
  a network backdoor.
- Sunburst could now collect and communicate system and user profile information, change time, run
  malicious processes, terminate processes by their Process ID (PID), write to files, delete files,
  access the registry, and even reboot the system.
- These actions are remotely communicating and controlled by a camouflaged backdoor using HTTP and
  mimicking normal activity as a part of OIP (Orion Improvement Program) protocol
- For a perpetrator, being able to control a process is tantamount to being able to stop essential
  processes from running, including backups, encryptions, and even audits.
*** Datta's Suggestions for Remediation
- Datta says, the following, "The Sunburst trojanised cyberattack exemplifies the growing sophistication
  in state-sponsored cyberattack and the need to treat cybersecurity as an imperative with proactive
  process reengineering".
**** Reengineer user process
- User (including vendor and consumer) errors are the weakest link, regardless of whether the user
  error is analog or automated (embedded in the operational logic): A Github misconfiguration error
  error might have been the genesis for the Sunburst hack.
  - Solarwinds server credentials that were supposed to be assigned as a private repository were
    instead released as a public repository, setting the stage for an attack.
- Datta argues that inadvertant misclassfication and release of sensitive information have been a
  wellspring for malicious actors.
  - In November 2017, users at Pentagon mistakenly released more than 100GB of classified US Army and
    NSA (National Security Agency) data, called Red Disk, on a publicly accessible AWS (Amazon Web Services)
    server.
  - The information included hashed password and private keys to access Pentagon resources [cite:@ClassifiedPentagonData2017].
  - UpGuard, a cybersecurity research group, discovered and reported the misplaced information back
    to the Pentagon and was peremptorily corrected, user errors, without a robust user process in place,
    can invite nefarious actors an actions.
**** Reengineer the software supply chain
- Software has a supply chain.
- The software supply chain carries data packets and code from vendors to clients with the network
  as the logistics infrastructure.
- These data packets and code originates from all across the world, hopping across the world, hoping
  across nodes and warehouses around the globe.
- A packet can be hijacked, and malicious code can be injected into a legitimate-looking packet.
- The ability of the perpetrators to create a digital signatures and certification infrastructure and
  implant and trojanise a Solarwinds Orion update underlines the need for revising for revising
  authentication processes and protocols.
- The new found cyberattack wisdom lies in evasion rather than the shock-and-awe of DoS attacks.
- APIs are particularly vulnerable as they serve as logistic connectors across various software and systems
  in the global network.
- With an ever-spreading software supply chain, code integrity is critical. Therefore, ensuring the
  integrity of code repositories where vulnerabilities might be disclosed and malicious lookalikes
  can be injected.
**** Reengineer using a perpetrator's mindset
- Datta states that the Sunburst hack highlights the new philosophy of "invade and evade" followed
  by more sophisticated and encompassing hacks.
- He highlights the fact that these attacks require patiently waiting to scan the environment,
  choosing the most  impactful target, attacking the target, and then disappearing by moving
  laterally across the network, acting like a legitimate source, and hiding in plain sight.
- The Sunburst malware hid in plain sight, embedding a malware payload inside a Solarwinds Orion
  update patch and relying on organisational routine patch downloads.
- Reengineering using a perpetrator's mindset reduces assumptions and obvious traditions.
  - For example: Solarwinds Orion's recommendation to exclude itself from its clients' anti-virus
    and EDR monitors, that its clients omit Orion communications from its anti-virus, capitalised
    on a routinised, albeit, sub-optimal operational culture.
- Perpetrators leverage organisations' long-held paradigmatic culture that cybersecurity is
  a black-and-white system. A black-and-white system is based on binary outcomes defined by discrete
  outcomes defined by discrete outcomes defined by discrete parameters. Cybersecurity operational
  culture needs to rest on continuous interception and vetting of activities.
**** Reengineer based on defensive analytics
- Data and pattern analysis are imperatives in understanding exceptions and suspicious behaviours
  from within applications and networks.
- There is a tendency, even a culture of focusing on zero-day exploits.
- The Sunburst attack was not a zero day exploit, but rather a passive, patient attack without
  raising suspicion.
- Zero-day exploits or a zero-day attack happens when perpetrators try to compromise software whose
  vulnerabilities have yet to be fixed or patched, zero-day exploits are more anticipated and
  organisations closely monitor any and all type of flaggable behaviour.
- Datta goes on to say this readiness turns to complacence over time and this is how the Sunburst
  hack capitalised on time and complacence, using the time to spoof a certification and authentication
  infrastructure and establishing a C2 center without raising suspicions.
**** Reengineer the network architecture
- Due to the mass digitisation due to COVID-19 crisis, organisations hurried to digital transfomation
  by allowing a variety of unknown BYOD (Bring Your Own Device) into the corporate network.
- Due to this dynamic and complicated nature, security policy was less granular and more generic
  based on nebulous privileges, roles, and monitors and based on trust.
- /Trust-based network architectures/: often rely on perimeter fencing, great for collocated-secure
  corporate offices but in environments such as Work-From-Home (WFH) are much more complicated to
  manage.
- Trust-based networks are simpler to manage but fall prey, as in the case of Sunburst hack, to
  malware disguised or embedded within a trusted entity.
- Users may be logging in from a variety of secure and unsecure public networks using a variety of
  devices, some compromised and some secure.
- Therefore, managing devices and micro-transactional monitoring are central to building security
  in a fluid environment with malicious actors.
- Datta instead focusses on suggesting Zero-Trust network architecture (e.g. Google BeyondCorp initiative)
  forwards a granular device-level and transactional-level security based on device-specific credentialing,
  micro-segmentation and micro-privileges for all DAAS (Data, Assets, Application, Services).
- Zero-Trust network architecture need to infer and designate trust for every device, not based on
  historical transactional-level trust, device, and user credentials, but based on dynamic monitoring
  of managed devices, user credentials, and transactions.
- Transactional-level monitoring would have flagged Sunburst hack activities trying to create,
  communicate,and reconfigure any and all DAAS, offering faster response and quicker threat isolation.
*** Datta's Conclusion
- The SolarWinds Sunburst hack highlights the need for deliberate process reengineering across
  the entire software supply chain rather than building siloed fortifications.
- In an age marked by growing digital connectivity across critical economic and operational
  infrastructures, securing the borders is more than just a firewall fortification.
- Instead, cybersecurity oepartional mindset needs to shift from *technical solutions* to
  *rengineering organisational processes and cultures* to stay ahead of state-sponsored APTs.
